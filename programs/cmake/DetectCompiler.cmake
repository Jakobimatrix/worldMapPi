# Detect the available compilers (GCC or Clang)
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    set(DEFAULT_COMPILER "Clang")
elseif (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    set(DEFAULT_COMPILER "GCC")
else()
    set(DEFAULT_COMPILER "Unknown")
endif()

message(STATUS "Detected compiler: ${DEFAULT_COMPILER}")

# Check for the CXX environment variable
if (DEFINED ENV{CXX})
    set(CMAKE_CXX_COMPILER $ENV{CXX})
    message(STATUS "Using compiler from CXX environment variable: $ENV{CXX}")
else()
    if (DEFAULT_COMPILER STREQUAL "Unknown")
        # no compiler detected.. set to gcc and probably fail later
        message(STATUS "No suitable compiler detected... try gcc and hope for the best.")
        set(CMAKE_CXX_COMPILER g++)
    elseif (DEFAULT_COMPILER STREQUAL "Clang")
        message(STATUS "Clang is the only available compiler. Using Clang.")
        set(CMAKE_CXX_COMPILER clang++)
    elseif (DEFAULT_COMPILER STREQUAL "GCC")
        message(STATUS "GCC is the only available compiler. Using GCC.")
        set(CMAKE_CXX_COMPILER g++)
    elseif (DEFAULT_COMPILER STREQUAL "Clang" AND "GCC")
        message(STATUS "Both Clang and GCC are available. Please select one (Clang or GCC):")
        string(REPLACE "\n" "" USER_COMPILER "")
        execute_process(COMMAND /bin/sh -c "read -r USER_COMPILER; echo $USER_COMPILER"
                        OUTPUT_VARIABLE USER_COMPILER)
        string(TOUPPER ${USER_COMPILER} USER_COMPILER_UPPER)
        if (USER_COMPILER_UPPER STREQUAL "CLANG")
            set(CMAKE_CXX_COMPILER clang++)
        elseif (USER_COMPILER_UPPER STREQUAL "GCC")
            set(CMAKE_CXX_COMPILER g++)
        else()
            message(FATAL_ERROR "Invalid choice. Please select Clang or GCC.")
        endif()
    endif()
endif()
